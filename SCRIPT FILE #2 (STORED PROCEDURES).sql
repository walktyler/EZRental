CREATE OR REPLACE PROCEDURE getUnmaintainedVehicles
IS 
    v_RENTALAGENCYNAME VARCHAR(50);
    v_VINNUMBER VARCHAR2(17);
    v_MAKE VARCHAR2(30);
    v_MODEL VARCHAR2(30);
    MILEAGE NUMBER(6);
    v_VEHICLESTATUSDESC VARCHAR2(30);
    
   
    CURSOR cur_maint IS 
    
    SELECT RA.RENTALAGENCYNAME, VINNUMBER, MAKE, MODEL, MILEAGE, VEHICLESTATUSDESC FROM VEHICLE V
    LEFT JOIN RENTALAGENCY RA ON RA.RENTALAGENCYID = V.VEHICLEOWNINGAGENCYID
    LEFT JOIN VEHICLESTATUS VS ON VS.VEHICLESTATUSID = V.VEHICLESTATUSID
    WHERE MILEAGE BETWEEN 10000 AND 35000
    ORDER BY RA.RENTALAGENCYNAME;
    
BEGIN

    OPEN cur_maint;
    
    LOOP
        FETCH cur_maint INTO v_RENTALAGENCYNAME, v_VINNUMBER, v_MAKE, v_MODEL, MILEAGE, v_VEHICLESTATUSDESC;
        EXIT WHEN cur_maint%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('VIN: ' || v_VINNUMBER || ' MAKE: ' || v_MAKE || ' MODEL: ' || v_MODEL || ' CURRENT MILEAGE: ' ||
        MILEAGE || ' VEHICLE STATUS: ' || v_VEHICLESTATUSDESC || ' OWNING AGENCY: ' || v_RENTALAGENCYNAME);
        
    END LOOP;
    CLOSE cur_maint;
END getUnmaintainedVehicles;

CREATE OR REPLACE PROCEDURE getRetailCustomerTimespan(p_months NUMBER)
IS
    V_FIRSTNAME VARCHAR2(30);
    V_LASTNAME VARCHAR2(30);
    V_ADDRESSLINE1 VARCHAR2(75);
    V_CITY VARCHAR2(15);
    V_STATECODE CHAR(2);
    V_ZIPCODE VARCHAR2(10);
    V_COUNTRY VARCHAR2(50);
    V_PHONE VARCHAR2(11);
    V_EMAIL VARCHAR2(75);
    V_MINRENTALPICKUPDATE DATE;
    V_TOTALCARSRENTED NUMBER;
    V_MONTH_SPAN DATE;
    CURSOR cur_timespan is 
    SELECT  FIRSTNAME, LASTNAME, CUS.ADDRESSLINE1, CUS.CITY, CUS.STATECODE, CUS.ZIPCODE, CUS.COUNTRY, CUS.PHONE, CUS.EMAIL,
    MIN(RENTAL.RENTALPICKUPDATE), count(*), ADD_MONTHS(MIN(RENTAL.RENTALPICKUPDATE) ,  p_months) FROM RENTAL 
    LEFT JOIN CUSTOMER CUS ON CUS.CUSTOMERID = RENTAL.CUSTOMERID
    GROUP BY CUS.CUSTOMERID, FIRSTNAME, LASTNAME, CUS.ADDRESSLINE1, CUS.CITY, CUS.STATECODE, CUS.ZIPCODE, CUS.COUNTRY, CUS.PHONE, CUS.EMAIL
    HAVING COUNT(*) >= 3
    ORDER BY CUS.CUSTOMERID;
    
BEGIN
        OPEN cur_timespan;
        LOOP
        FETCH cur_timespan INTO V_FIRSTNAME, V_LASTNAME, V_ADDRESSLINE1, V_CITY, V_STATECODE, V_ZIPCODE, V_COUNTRY, V_PHONE, V_EMAIL, V_MINRENTALPICKUPDATE,
        V_TOTALCARSRENTED, V_MONTH_SPAN;
        EXIT WHEN cur_timespan%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Full Name: ' || V_FIRSTNAME || ' ' || V_LASTNAME || ' Mailing Address: ' || V_ADDRESSLINE1 || ' ' || V_CITY 
        || ' ' || V_STATECODE || ' ' || V_ZIPCODE || ' ' || V_COUNTRY || ' Phone #: ' || V_PHONE || ' Email Address: ' || V_EMAIL || ' First Rental Pick Up Date: ' ||
        ' Total Cars Rented: ' || V_TOTALCARSRENTED || ' ' || V_MONTH_SPAN || ' Month span');
    END LOOP;
    CLOSE cur_timespan;
END getRetailCustomerTimespan;
        
CREATE OR REPLACE PROCEDURE getRetailCustFrequents
IS
    V_CUSTOMERID NUMBER;
    V_FIRSTNAME VARCHAR2(30);
    V_LASTNAME VARCHAR2(30);
    V_ADDRESSLINE1 VARCHAR2(75);
    V_CITY VARCHAR2(15);
    V_STATECODE CHAR(2);
    V_ZIPCODE VARCHAR2(10);
    V_COUNTRY VARCHAR2(50);
    V_PHONE VARCHAR2(11);
    V_EMAIL VARCHAR2(75);
    V_RENTALAGENCYNAME VARCHAR2(50);
    V_TIMESRENTED NUMBER;
    
    CURSOR cur_frequent is 
        SELECT FIRSTNAME, LASTNAME, CUS.ADDRESSLINE1, CUS.CITY, CUS.STATECODE, CUS.ZIPCODE, CUS.COUNTRY, CUS.PHONE, CUS.EMAIL, RA.RENTALAGENCYNAME, COUNT(RA.RENTALAGENCYNAME) FROM CUSTOMER CUS
    RIGHT JOIN RENTAL ON RENTAL.CUSTOMERID = CUS.CUSTOMERID
    LEFT JOIN RENTALAGENCY RA ON RA.RENTALAGENCYID = RENTAL.RENTALAGENCYID
    WHERE CUS.CUSTOMERTYPE = 'R'
    GROUP BY CUS.CUSTOMERID, FIRSTNAME, LASTNAME, CUS.ADDRESSLINE1, CUS.CITY, CUS.STATECODE, CUS.ZIPCODE, CUS.COUNTRY, CUS.PHONE, CUS.EMAIL, RA.RENTALAGENCYNAME
    ORDER BY COUNT(RA.RENTALAGENCYNAME) DESC; 
    
BEGIN
        OPEN cur_frequent;
        LOOP
        FETCH cur_frequent INTO V_FIRSTNAME, V_LASTNAME, V_ADDRESSLINE1, V_CITY, V_STATECODE, V_ZIPCODE, V_COUNTRY, V_PHONE, V_EMAIL, V_RENTALAGENCYNAME,
        V_TIMESRENTED;
        EXIT WHEN cur_frequent%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Full Name: ' || V_FIRSTNAME || ' ' || V_LASTNAME || ' Mailing Address: ' || V_ADDRESSLINE1 || ' ' || V_CITY 
        || ' ' || V_STATECODE || ' ' || V_ZIPCODE || ' ' || V_COUNTRY || ' Phone #: ' || V_PHONE || ' Email Address: ' || V_EMAIL || ' Rental Agency Name: ' ||
        V_RentalAgencyName || ' # of Times Rented From: ' || V_TIMESRENTED );
    END LOOP;
    CLOSE cur_frequent;
END getRetailCustFrequents;

CREATE OR REPLACE PROCEDURE getTotalAgencyRevenue
IS
    V_RENTALAGENCYNAME VARCHAR2(50);
    V_RENTALDEPOSIT NUMBER(8,2);
    V_INSURANCEOPT NUMBER(6,2);
    V_CATEGORYDAILYRENTALRATE NUMBER(5,2);
    V_RENTALPICKUPDATE DATE;
    V_RENTALDROPOFFDATE DATE;
    V_MINRENTALPICKUPDATE DATE;
    V_MAXRENTALPICKUPDATE DATE;
    TotalRev NUMBER(8,2);
    
    CURSOR cur_exec is 
            SELECT RA.RENTALAGENCYNAME, SUM(RENTALDEPOSIT + RIO.INSURANCEOPTIONADDITIONALCOST + (VRC.CATEGORYDAILYRENTALRATE * ABS((RENTAL.RENTALPICKUPDATE - RENTAL.RENTALDROPOFFDATE)))) AS "GENERATED REVENUE" , MIN(RENTAL.RENTALPICKUPDATE), MAX(RENTAL.RENTALPICKUPDATE)  FROM RENTAL
    LEFT JOIN RENTALAGENCY RA ON RA.RENTALAGENCYID = RENTAL.RENTALAGENCYID
    LEFT JOIN VEHICLE V ON V.VEHICLEID = RENTAL.VEHICLEID
    LEFT JOIN VEHICLERENTALCATEGORY VRC ON VRC.VEHICLERENTALCATEGORYID = V.VEHICLERENTALCATEGORYID
    LEFT JOIN RENTALINSURANCEOPTION RIO ON RIO.INSURANCEOPTIONID = RENTAL.INSURANCEOPTIONID
    GROUP BY RA.RENTALAGENCYNAME
    ORDER BY "GENERATED REVENUE" DESC;
    
BEGIN
        OPEN cur_exec;
        LOOP
        FETCH cur_exec INTO V_RENTALAGENCYNAME, TotalRev, V_MINRENTALPICKUPDATE, V_MAXRENTALPICKUPDATE;
        EXIT WHEN cur_exec%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Rental Agency Name: ' || V_RENTALAGENCYNAME || ' Total Revenue Generated: ' || TotalRev || ' From:' || V_MINRENTALPICKUPDATE || ' To:' || V_MAXRENTALPICKUPDATE );
    END LOOP;
    CLOSE cur_exec;
END getTotalAgencyRevenue;
        
CREATE OR REPLACE PROCEDURE getCarUsage
IS
    V_VINNUMBER VARCHAR2(17);
    V_MAKE VARCHAR2(30);
    V_MODEL VARCHAR2(30);
    V_avgRENTALDEPOSIT NUMBER;
    V_TIMESRENTED NUMBER;
    
    
    CURSOR cur_exec is 
            SELECT VINNUMBER, MAKE, MODEL, AVG(RENTALDEPOSIT) "AVERAGE RENTAL DEPOSIT", COUNT(*) "# OF TIMES RENTED" FROM VEHICLE V
LEFT JOIN RENTAL ON RENTAL.VEHICLEID = V.VEHICLEID
GROUP BY V.VEHICLEID, MAKE, MODEL, VINNUMBER
HAVING AVG(RENTALDEPOSIT) IS NOT NULL
ORDER BY "# OF TIMES RENTED" DESC, AVG(RENTALDEPOSIT) DESC;
    
BEGIN
        OPEN cur_exec;
        LOOP
        FETCH cur_exec INTO V_VINNUMBER, V_MAKE, V_MODEL, V_avgRENTALDEPOSIT, V_TIMESRENTED;
        EXIT WHEN cur_exec%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('VIN: ' || V_VINNUMBER || ' MAKE: ' || V_MAKE || ' MODEL: ' || V_MODEL || ' Average Rental Deposit:' || V_avgRENTALDEPOSIT || ' # Of Times Rented: ' || V_TIMESRENTED);
    END LOOP;
    CLOSE cur_exec;
END getCarUsage;        
        
EXECUTE getUnmaintainedVehicles();
EXECUTE getRetailCustomerTimespan(4);
EXECUTE getRetailCustFrequents();
EXECUTE getTotalAgencyRevenue();
EXECUTE getCarUsage; 